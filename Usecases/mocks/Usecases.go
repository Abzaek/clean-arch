// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	domain "github.com/Abzaek/clean-arch/domain"
	mock "github.com/stretchr/testify/mock"
)

// Usecases is an autogenerated mock type for the Usecases type
type Usecases struct {
	mock.Mock
}

// DeleteTask provides a mock function with given fields: taskId
func (_m *Usecases) DeleteTask(taskId string) error {
	ret := _m.Called(taskId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(taskId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUser provides a mock function with given fields: userId
func (_m *Usecases) DeleteUser(userId string) error {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindUser provides a mock function with given fields: userId
func (_m *Usecases) FindUser(userId string) (*domain.User, error) {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for FindUser")
	}

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.User, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.User); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllTasks provides a mock function with given fields:
func (_m *Usecases) GetAllTasks() ([]*domain.Task, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllTasks")
	}

	var r0 []*domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*domain.Task, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*domain.Task); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Task)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTaskById provides a mock function with given fields: taskId
func (_m *Usecases) GetTaskById(taskId string) (*domain.Task, error) {
	ret := _m.Called(taskId)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskById")
	}

	var r0 *domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.Task, error)); ok {
		return rf(taskId)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.Task); ok {
		r0 = rf(taskId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(taskId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveTask provides a mock function with given fields: task
func (_m *Usecases) SaveTask(task *domain.Task) error {
	ret := _m.Called(task)

	if len(ret) == 0 {
		panic("no return value specified for SaveTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Task) error); ok {
		r0 = rf(task)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveUser provides a mock function with given fields: user
func (_m *Usecases) SaveUser(user *domain.User) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for SaveUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTask provides a mock function with given fields: task
func (_m *Usecases) UpdateTask(task *domain.Task) error {
	ret := _m.Called(task)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Task) error); ok {
		r0 = rf(task)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUser provides a mock function with given fields: user
func (_m *Usecases) UpdateUser(user *domain.User) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUsecases creates a new instance of Usecases. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUsecases(t interface {
	mock.TestingT
	Cleanup(func())
}) *Usecases {
	mock := &Usecases{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
